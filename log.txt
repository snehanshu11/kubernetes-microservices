[ec2-user@ip-10-10-1-146 server]$ sudo docker build -t myserver:v1 .
[+] Building 12.3s (9/9) FINISHED                                                                                                                                                                                                              docker:default
 => [internal] load build definition from Dockerfile                                                                                                                                                                                                     0.0s
 => => transferring dockerfile: 277B                                                                                                                                                                                                                     0.0s
 => [internal] load .dockerignore                                                                                                                                                                                                                        0.0s
 => => transferring context: 2B                                                                                                                                                                                                                          0.0s
 => [internal] load metadata for docker.io/library/python:3.9-slim                                                                                                                                                                                       0.1s
 => [1/4] FROM docker.io/library/python:3.9-slim@sha256:bcdcaefe092335ff0a0ed421e8a8d12b86fc2c1feb1199fbdac27d67ba808a9c                                                                                                                                 0.0s
 => [internal] load build context                                                                                                                                                                                                                        0.0s
 => => transferring context: 868B                                                                                                                                                                                                                        0.0s
 => CACHED [2/4] WORKDIR /app                                                                                                                                                                                                                            0.0s
 => [3/4] COPY . /app                                                                                                                                                                                                                                    0.0s
 => [4/4] RUN pip install --no-cache-dir -r requirements.txt                                                                                                                                                                                            11.1s
 => exporting to image                                                                                                                                                                                                                                   1.0s 
 => => exporting layers                                                                                                                                                                                                                                  1.0s 
 => => writing image sha256:2fe94548fa4df3474f426fd00cf2c2928357065fcd7ce0e8e48635a0987e341f                                                                                                                                                             0.0s 
 => => naming to docker.io/library/myserver:v1                           

[ec2-user@ip-10-10-1-146 server]$ curl -s http://localhost:8000/items/3 | jq

{
  "item_id": 103,
  "server": true,
  "client": false
}

[ec2-user@ip-10-10-1-146 client]$ sudo docker build -t myclient:v1 .
[+] Building 13.0s (9/9) FINISHED                                                                                                                                                                                                              docker:default
 => [internal] load build definition from Dockerfile                                                                                                                                                                                                     0.0s
 => => transferring dockerfile: 277B                                                                                                                                                                                                                     0.0s
 => [internal] load .dockerignore                                                                                                                                                                                                                        0.0s
 => => transferring context: 2B                                                                                                                                                                                                                          0.0s
 => [internal] load metadata for docker.io/library/python:3.9-slim                                                                                                                                                                                       0.3s
 => [1/4] FROM docker.io/library/python:3.9-slim@sha256:bcdcaefe092335ff0a0ed421e8a8d12b86fc2c1feb1199fbdac27d67ba808a9c                                                                                                                                 0.0s
 => [internal] load build context                                                                                                                                                                                                                        0.0s
 => => transferring context: 1.81kB                                                                                                                                                                                                                      0.0s
 => CACHED [2/4] WORKDIR /app                                                                                                                                                                                                                            0.0s
 => [3/4] COPY . /app                                                                                                                                                                                                                                    0.0s
 => [4/4] RUN pip install --no-cache-dir -r requirements.txt                                                                                                                                                                                            11.4s
 => exporting to image                                                                                                                                                                                                                                   1.1s
 => => exporting layers                                                                                                                                                                                                                                  1.1s
 => => writing image sha256:d7554b86e09deff12fc51a31932d285db4acc4e4afa085771e75e103989bc432                                                                                                                                                             0.0s 
 => => naming to docker.io/library/myclient:v1                 
 

[ec2-user@ip-10-10-1-146 server]$ sudo docker login -u AWS -p $(aws ecr get-login-password --region us-west-2) 748735308412.dkr.ecr.us-west-2.amazonaws.com
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
[ec2-user@ip-10-10-1-146 server]$ sudo docker tag server:v1 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
[ec2-user@ip-10-10-1-146 server]$ sudo docker push 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
The push refers to repository [748735308412.dkr.ecr.us-west-2.amazonaws.com/server]
e2671409f93a: Pushed 
d9a76ed7b23f: Pushed 
dc81aa298ec8: Pushed 
f268cf34955e: Pushed 
087aa9f40b61: Pushed 
c4e334227cca: Pushed 
da5d55102092: Pushed 
fb1bd2fc5282: Pushed 
latest: digest: sha256:a868508ff408945813019832f9fe1d7090d0bb8d954b6cc702ca2191b47313d3 size: 1996
[ec2-user@ip-10-10-1-146 server]$ 

bash-3.2$ eksctl create cluster --name kube-cluster --nodegroup-name ng-default --version 1.28 --node-type t2.micro --nodes 2 --region us-west-2
2024-02-10 09:05:46 [ℹ]  eksctl version 0.165.0
2024-02-10 09:05:46 [ℹ]  using region us-west-2
2024-02-10 09:05:53 [ℹ]  skipping us-west-2d from selection because it doesn't support the following instance type(s): t2.micro
2024-02-10 09:05:53 [ℹ]  setting availability zones to [us-west-2c us-west-2b us-west-2a]
2024-02-10 09:05:53 [ℹ]  subnets for us-west-2c - public:192.168.0.0/19 private:192.168.96.0/19
2024-02-10 09:05:53 [ℹ]  subnets for us-west-2b - public:192.168.32.0/19 private:192.168.128.0/19
2024-02-10 09:05:53 [ℹ]  subnets for us-west-2a - public:192.168.64.0/19 private:192.168.160.0/19
2024-02-10 09:05:53 [ℹ]  nodegroup "ng-default" will use "" [AmazonLinux2/1.28]
2024-02-10 09:05:53 [ℹ]  using Kubernetes version 1.28
2024-02-10 09:05:53 [ℹ]  creating EKS cluster "kube-cluster" in "us-west-2" region with managed nodes
2024-02-10 09:05:53 [ℹ]  will create 2 separate CloudFormation stacks for cluster itself and the initial managed nodegroup
2024-02-10 09:05:53 [ℹ]  if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=us-west-2 --cluster=kube-cluster'
2024-02-10 09:05:53 [ℹ]  Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster "kube-cluster" in "us-west-2"
2024-02-10 09:05:53 [ℹ]  CloudWatch logging will not be enabled for cluster "kube-cluster" in "us-west-2"
2024-02-10 09:05:53 [ℹ]  you can enable it with 'eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=us-west-2 --cluster=kube-cluster'
2024-02-10 09:05:53 [ℹ]  
2 sequential tasks: { create cluster control plane "kube-cluster", 
    2 sequential sub-tasks: { 
        wait for control plane to become ready,
        create managed nodegroup "ng-default",
    } 
}
2024-02-10 09:05:53 [ℹ]  building cluster stack "eksctl-kube-cluster-cluster"
2024-02-10 09:05:59 [ℹ]  deploying stack "eksctl-kube-cluster-cluster"
2024-02-10 09:06:29 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:07:05 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:08:11 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:09:17 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:10:23 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:11:30 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:12:36 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:13:42 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:14:48 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-cluster"
2024-02-10 09:17:22 [ℹ]  building managed nodegroup stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 09:17:36 [ℹ]  deploying stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 09:17:36 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 09:18:12 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 09:19:11 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 09:21:01 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 09:21:01 [ℹ]  waiting for the control plane to become ready
2024-02-10 09:21:01 [✔]  saved kubeconfig as "/Users/snehanshu.suman/.kube/config"
2024-02-10 09:21:01 [ℹ]  no tasks
2024-02-10 09:21:01 [✔]  all EKS cluster resources for "kube-cluster" have been created
2024-02-10 09:21:07 [ℹ]  nodegroup "ng-default" has 2 node(s)
2024-02-10 09:21:07 [ℹ]  node "ip-192-168-20-33.us-west-2.compute.internal" is ready
2024-02-10 09:21:07 [ℹ]  node "ip-192-168-37-239.us-west-2.compute.internal" is ready
2024-02-10 09:21:07 [ℹ]  waiting for at least 2 node(s) to become ready in "ng-default"
2024-02-10 09:21:08 [ℹ]  nodegroup "ng-default" has 2 node(s)
2024-02-10 09:21:08 [ℹ]  node "ip-192-168-20-33.us-west-2.compute.internal" is ready
2024-02-10 09:21:08 [ℹ]  node "ip-192-168-37-239.us-west-2.compute.internal" is ready
2024-02-10 09:21:09 [ℹ]  kubectl command should work with "/Users/snehanshu.suman/.kube/config", try 'kubectl get nodes'
2024-02-10 09:21:09 [✔]  EKS cluster "kube-cluster" in "us-west-2" region is ready
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 00~eksctl delete cluster --name=kube-cluster --region=us-west-2
bash: 00~eksctl: command not found
bash-3.2$ 01~
bash: 01~: command not found
bash-3.2$ 
bash-3.2$ eksctl delete cluster --name=kube-cluster --region=us-west-2
2024-02-10 13:05:47 [ℹ]  deleting EKS cluster "kube-cluster"
2024-02-10 13:05:55 [ℹ]  will drain 0 unmanaged nodegroup(s) in cluster "kube-cluster"
2024-02-10 13:05:55 [ℹ]  starting parallel draining, max in-flight of 1
2024-02-10 13:06:01 [ℹ]  deleted 0 Fargate profile(s)
2024-02-10 13:06:15 [✔]  kubeconfig has been updated
2024-02-10 13:06:15 [ℹ]  cleaning up AWS load balancers created by Kubernetes objects of Kind Service or Ingress
2024-02-10 13:06:36 [ℹ]  
2 sequential tasks: { delete nodegroup "ng-default", delete cluster control plane "kube-cluster" [async] 
}
2024-02-10 13:06:36 [ℹ]  will delete stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 13:06:36 [ℹ]  waiting for stack "eksctl-kube-cluster-nodegroup-ng-default" to get deleted
2024-02-10 13:06:37 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 13:07:13 [ℹ]  waiting for CloudFormation stack "eksctl-kube-cluster-nodegroup-ng-default"
2024-02-10 13:07:13 [ℹ]  will delete stack "eksctl-kube-cluster-cluster"
2024-02-10 13:07:15 [✔]  all cluster resources were deleted
bash-3.2$ 

